#include <stdio.h>
#include <stdlib.h>

struct no
{
    char letra;
    struct no *prox;
};
typedef struct no Lista;

Lista *insere(Lista *L, char let)
{
    Lista *novo;
    novo = (Lista*)malloc(sizeof(Lista));
    novo->letra = let;
    novo->prox = L;
    return novo;
}

void imprime(Lista *L)
{
    Lista *aux = L;
    while (aux != NULL) {
        printf("%c", aux->letra);
        aux = aux->prox;
    }
    printf("\n");
}

int verifica(Lista *L1, Lista *L3)
{
    Lista *aux1 = L1;
    Lista *aux3 = L3;
    while (aux3 != NULL)
    {
        if (aux1 == NULL || aux1->letra != aux3->letra)
        {
            return 0;
        }
        aux1 = aux1->prox;
        aux3 = aux3->prox;
    }
    return 1;
}

Lista* copiarLista(Lista *L){
    if (L == NULL)
        return NULL;

    Lista *nova = NULL;
    Lista *ultimo = NULL;
    Lista *aux = L;

    while (aux != NULL){
        Lista *novo = (Lista *)malloc(sizeof(Lista));
        if (novo == NULL){
            printf("Erro de alocação de memória.\n");
            exit(1);
        }
        novo->letra = aux->letra;
        novo->prox = NULL;

        if (nova == NULL){
            nova = novo;
        }else{
            ultimo->prox = novo;
        }

        ultimo = novo;
        aux = aux->prox;
    }

    return nova;
}


Lista *substitui(Lista *L1, Lista *L3, Lista *L2)
{
    Lista *ant = NULL;
    Lista *aux = L1;

    while (aux != NULL)
    {
        if (verifica(aux, L3))
        {
            Lista *copiaL3 = L3;
            while (copiaL3 != NULL)
            {
                aux = aux->prox;
                copiaL3 = copiaL3->prox;
            }

            Lista *copiaL2 = copiarLista(L2);
            Lista *FinalL2 = copiaL2;

            while(FinalL2->prox != NULL)
            {
                FinalL2 = FinalL2->prox;
            }

            if (ant == NULL)
            {
                L1 = copiaL2;
            } else
            {
                ant->prox = copiaL2;
            }

            FinalL2->prox = aux;
        }
        else
        {
            ant = aux;
            aux = aux->prox;
        }
    }
    return L1;
}

int main()
{
    Lista *L1 = NULL;
    Lista *L2 = NULL;
    Lista *L3 = NULL;

    L1 = insere(L1, 'n');
    L1 = insere(L1, 'e');
    L1 = insere(L1, 'l');
    L1 = insere(L1, 'e');
    L1 = insere(L1, 'h');
    L1 = insere(L1, 'l');
    L1 = insere(L1, 'e');


    L2 = insere(L2, 'A');
    L2 = insere(L2, 'S');
    L2 = insere(L2, 'A');
    L2 = insere(L2, 'C');


    L3 = insere(L3, 'l');
    L3 = insere(L3, 'e');

    puts("NA POSICAO QUE L3 APARECER EM L1, O PROGRAMA SUBSTITUI POR L2.");
    printf("Lista L1 antes da substituição:\n");
    imprime(L1);
    printf("Lista L2:\n");
    imprime(L2);
    printf("Lista L3:\n");
    imprime(L3);

    L1 = substitui(L1, L3, L2);

    printf("Lista L1 apos a subs:\n");
    imprime(L1);

    return 0;
}
